--- platform_utils.py.backup
+++ platform_utils.py
@@ -20,6 +20,7 @@
         self.is_mac = self.system == 'darwin'
         self.is_unix = self.is_linux or self.is_mac
         
+        self.is_docker = self._check_docker_environment()
         self.has_display = self._check_display_available()
         self.is_admin = self._check_admin_privileges()
         
@@ -29,6 +30,35 @@
         else:
             return os.environ.get('DISPLAY') is not None
     
+    def _check_docker_environment(self):
+        """Check if running inside Docker container"""
+        # Multiple ways to detect Docker environment
+        docker_indicators = [
+            # Check for .dockerenv file
+            os.path.exists('/.dockerenv'),
+            # Check if cgroup contains docker
+            self._check_cgroup_docker(),
+            # Check environment variables set by Docker
+            os.environ.get('DOCKER_CONTAINER') == '1',
+            # Check for common Docker networking
+            self._check_docker_networking()
+        ]
+        return any(docker_indicators)
+    
+    def _check_cgroup_docker(self):
+        """Check if cgroup indicates Docker"""
+        try:
+            with open('/proc/1/cgroup', 'r') as f:
+                content = f.read()
+                return 'docker' in content.lower() or 'containerd' in content.lower()
+        except (IOError, OSError):
+            return False
+    
+    def _check_docker_networking(self):
+        """Check for Docker-specific networking indicators"""
+        try:
+            # Docker often uses these hostname patterns
+            hostname = os.environ.get('HOSTNAME', '')
+            return len(hostname) == 12 and hostname.isalnum()
+        except:
+            return False
+    
     def _check_admin_privileges(self):
         try:
             if self.is_windows:
PATCH_EOF < /dev/null
